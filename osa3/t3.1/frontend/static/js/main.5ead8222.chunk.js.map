{"version":3,"sources":["components/Form.js","components/Filter.js","components/Results.js","components/Alerts.js","services/persons.js","App.js","serviceWorker.js","index.js"],"names":["Form","_ref","addName","newName","handleNameChange","newNumber","handleNumberChange","react_default","a","createElement","onSubmit","value","onChange","className","type","Filter","search","handleSearch","Results","rows","Alert","message","alert","messageType","role","baseUrl","services_persons","getAllPersons","axios","get","then","res","data","addPerson","newPerson","post","updatePerson","id","updatedPerson","put","deletePerson","delete","App","_useState","useState","_useState2","Object","slicedToArray","persons","setPersons","_useState3","_useState4","setNewName","_useState5","_useState6","setNewNumber","_useState7","_useState8","setSearch","_useState9","_useState10","setMessage","_useState11","_useState12","setMessageType","useEffect","personService","allPersons","catch","err","console","log","handleDeleteNumber","name","window","confirm","filter","p","setTimeout","Alerts","components_Filter","event","preventDefault","target","components_Form","find","x","indexOf","number","map","returnedPerson","concat","components_Results","person","key","onClick","t","RegExp","test","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5ead8222.chunk.js","sourcesContent":["import React from 'react';\n\nconst Form = ({\n  addName,\n  newName,\n  handleNameChange,\n  newNumber,\n  handleNumberChange\n}) => {\n  return (\n    <form onSubmit={addName}>\n      <div>\n        Name: <input value={newName} onChange={handleNameChange} />\n      </div>\n      <div>\n        Number: <input value={newNumber} onChange={handleNumberChange} />\n      </div>\n      <div>\n        <button className=\"btn btn-primary m-1\" type=\"submit\">\n          Add\n        </button>\n      </div>\n    </form>\n  );\n};\n\nexport default Form;\n","import React from 'react';\n\nconst Filter = ({ search, handleSearch }) => {\n  return (\n    <p>\n      filter show with <input value={search} onChange={handleSearch} />\n    </p>\n  );\n};\n\nexport default Filter;\n","import React from 'react';\n\nconst Results = ({ rows }) => {\n  return <ul>{rows}</ul>;\n};\n\nexport default Results;\n","import React from 'react';\n\nconst Alert = ({ message, messageType }) => {\n  const alert = 'mt-3 mb-1 alert alert-' + messageType;\n  if (message === '') {\n    return <div />;\n  } else {\n    return (\n      <div className={alert} role=\"alert\">\n        {message}\n      </div>\n    );\n  }\n};\n\nexport default Alert;\n","import axios from 'axios';\nconst baseUrl = 'http://localhost:3001/api/persons';\n\nconst getAllPersons = () => {\n  return axios.get(baseUrl).then(res => res.data);\n};\n\nconst addPerson = newPerson => {\n  return axios.post(baseUrl, newPerson).then(res => res.data);\n};\n\nconst updatePerson = (id, updatedPerson) => {\n  return axios.put(baseUrl + '/' + id, updatedPerson).then(res => res.data);\n};\n\nconst deletePerson = id => {\n  return axios.delete(baseUrl + '/' + id).then(res => res.data);\n};\n\nexport default { getAllPersons, addPerson, updatePerson, deletePerson };\n","import React, { useState, useEffect } from 'react';\nimport Form from './components/Form';\nimport Filter from './components/Filter';\nimport Results from './components/Results';\nimport Alert from './components/Alerts';\nimport personService from './services/persons';\n\nfunction App() {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNumber, setNewNumber] = useState('');\n  const [search, setSearch] = useState('');\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState('success');\n\n  useEffect(() => {\n    personService\n      .getAllPersons()\n      .then(allPersons => {\n        setPersons(allPersons);\n      })\n      .catch(err => {\n        console.log('getAllPersons', err);\n      });\n  }, []);\n\n  const addName = event => {\n    event.preventDefault();\n    const res = persons.find(x => x.name === newName);\n    if (persons.indexOf(res) > -1) {\n      if (\n        window.confirm(\n          newName +\n            ' is already added to phonebook, replace the old number with a new one?'\n        )\n      ) {\n        personService\n          .updatePerson(res.id, { name: newName, number: newNumber })\n          .then(res => {\n            console.log(res, typeof res);\n            setPersons(persons.map(p => (p.id !== res.id ? p : res)));\n            setNewName('');\n            setNewNumber('');\n            setMessage('Updated ' + newName);\n            setMessageType('success');\n            setTimeout(() => {\n              setMessage('');\n            }, 5000);\n          })\n          .catch(err => {\n            console.log('updatePerson ', err);\n          });\n      }\n    } else {\n      const newPerson = {\n        name: newName,\n        number: newNumber\n      };\n\n      personService\n        .addPerson(newPerson)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson));\n          setNewName('');\n          setNewNumber('');\n          setMessage('Added ' + newName);\n          setMessageType('success');\n          setTimeout(() => {\n            setMessage('');\n          }, 5000);\n        })\n        .catch(err => {\n          console.log('addName ', err);\n        });\n    }\n  };\n\n  const rows = () => {\n    if (search === '') {\n      return persons.map(person => (\n        <li key={person.id}>\n          {person.name} {person.number}\n          <button\n            className=\"btn btn-primary btn-sm m-1\"\n            onClick={() => handleDeleteNumber(person.id, person.name)}\n          >\n            delete\n          </button>\n        </li>\n      ));\n    } else {\n      const t = persons.filter(x => new RegExp(search, 'i').test(x.name));\n      console.log(t);\n      return t.map(person => (\n        <li key={person.id}>\n          {person.name} {person.number}\n          <button\n            className=\"btn btn-primary btn-sm m-1\"\n            onClick={() => handleDeleteNumber(person.id, person.name)}\n          >\n            delete\n          </button>\n        </li>\n      ));\n    }\n  };\n\n  const handleNameChange = event => {\n    event.preventDefault();\n    console.log(event.target.value);\n    setNewName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    event.preventDefault();\n    console.log(event.target.value);\n    setNewNumber(event.target.value);\n  };\n\n  const handleSearch = event => {\n    event.preventDefault();\n    console.log(event.target.value);\n    setSearch(event.target.value);\n  };\n\n  const handleDeleteNumber = (id, name) => {\n    console.log(id);\n    if (window.confirm('Delete ' + name + '?')) {\n      personService\n        .deletePerson(id)\n        .then(() => {\n          setPersons(persons.filter(p => p.id !== id));\n          console.log('person ', id, ' deleted');\n          setMessage(name + ' removed');\n          setMessageType('success');\n          setTimeout(() => {\n            setMessage('');\n          }, 5000);\n        })\n        .catch(err => {\n          console.log('deletePerson ', err);\n          setMessage(name + '  has already been removed from server');\n          setMessageType('danger');\n          setTimeout(() => {\n            setMessage('');\n          }, 5000);\n        });\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <Alert message={message} messageType={messageType} />\n          <h1>Phonebook</h1>\n          <Filter search={search} handleSearch={handleSearch} />\n          <h2>add a new</h2>\n          <Form\n            addName={addName}\n            newName={newName}\n            handleNameChange={handleNameChange}\n            newNumber={newNumber}\n            handleNumberChange={handleNumberChange}\n          />\n          <h2>Numbers</h2>\n          <Results rows={rows()} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}