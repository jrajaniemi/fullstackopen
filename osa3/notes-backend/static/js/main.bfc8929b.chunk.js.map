{"version":3,"sources":["components/Note.js","components/Notification.js","services/notes.js","App.js","index.js"],"names":["Note","_ref","note","toggleImportance","label","important","react_default","a","createElement","className","content","onClick","Notification","message","services_notes","axios","get","then","res","data","newObject","post","id","put","concat","App","props","_useState","useState","_useState2","Object","slicedToArray","notes","setNotes","_useState3","_useState4","newNote","setNewNote","_useState5","_useState6","showAll","setShowAll","_useState7","_useState8","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","components_Notification","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","returnedNote","value","onChange","target","type","map","components_Note","key","find","n","changedNote","objectSpread","catch","err","setTimeout","toggleImportanceOf","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.bfc8929b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important';\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\n\nexport default Note;\n","import React from 'react';\n\nconst Notification = ({ message }) => {\n  if (message === null || message === '') {\n    return null;\n  }\n\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","import axios from 'axios';\nconst baseUrl = '/api/notes';\n\nconst getAll = () => {\n  const req = axios.get(baseUrl);\n  return req.then(res => res.data);\n};\n\nconst create = newObject => {\n  const req = axios.post(baseUrl, newObject);\n  return req.then(res => res.data);\n};\n\nconst update = (id, newObject) => {\n  const req = axios.put(`${baseUrl}/${id}`, newObject);\n  return req.then(res => res.data);\n};\n\nexport default { getAll, create, update };\n","import React, { useState, useEffect } from 'react';\nimport Note from './components/Note';\nimport Notification from './components/Notification';\nimport noteService from './services/notes';\n\nconst App = props => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note...');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('');\n\n  useEffect(() => {\n    console.log('effect');\n    noteService.getAll().then(initialNotes => {\n      setNotes(initialNotes);\n    });\n  }, []);\n\n  console.log('render', notes.length, 'notes');\n\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(note => note.important === true);\n\n  const toggleImportanceOf = id => {\n    console.log('importance of ' + id + ' needs to be toggled');\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note, important: !note.important };\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => (note.id !== id ? note : returnedNote)));\n      })\n      .catch(err => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n        setNotes(notes.filter(n => n.id !== id));\n      });\n  };\n\n  const rows = () =>\n    notesToShow.map(note => (\n      <Note\n        key={note.id}\n        note={note}\n        toggleImportance={() => toggleImportanceOf(note.id)}\n      />\n    ));\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5\n    };\n\n    noteService.create(noteObject).then(returnedNote => {\n      setNotes(notes.concat(returnedNote));\n      setNewNote('');\n    });\n  };\n\n  const handleNoteChange = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <button onClick={() => setShowAll(!showAll)}>\n        show {showAll ? 'important' : 'all'}\n      </button>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n      <ul>{rows()}</ul>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}